/// A signed integer value.
public struct Int {

  /// The raw value of this instance.
  internal var value: Builtin.word

  /// Creates an instance with its raw value.
  internal memberwise init

  /// Creates an instance equal to `false`.
  public init() {
    &self.value = Builtin.zeroinitializer_word()
  }

  // /// Returns the absolute value of `self`.
  // public fun abs() -> Int {

  // }

}

public given Int is ExpressibleByIntegerLiteral { /* built-in */ }

public given Int is Equatable {

  public fun infix== (_ other: Self) -> Bool {
    .new(value: Builtin.icmp_eq_word(self.value, other.value))
  }

  public fun infix!= (_ other: Self) -> Bool {
    .new(value: Builtin.icmp_ne_word(self.value, other.value))
  }

}

public given Int is AdditiveArithmetic {

  fun infix+ (_ other: Self) -> Self {
    let (result, overflow) = Builtin.sadd_with_overflow_word(self.value, other.value)
    if Bool(value: overflow) {
      fatal_error()
    } else {
      return .new(value: result)
    }
  }

  fun infix- (_ other: Self) -> Self {
    let (result, overflow) = Builtin.ssub_with_overflow_word(self.value, other.value)
    if Bool(value: overflow) {
      fatal_error()
    } else {
      return .new(value: result)
    }
  }

  static fun zero() -> Self {
    .new()
  }

}

public given Int is Numeric {

  fun infix* (_ other: Self) -> Self {
    .new(value: Builtin.mul_word(self.value, other.value))
  }

}
