//! no-std

trait Base {
  fun f()
}

trait Derived {
  given Derived.Self is Base
  fun g() { self.f() }
}

trait FurtherDerived refines Derived {}

fun ghi<T where T is Derived>(_ x: T) {
  x.g()
  x.f()
}

fun jkl<T where T is FurtherDerived>(_ x: T) {
  x.g()
  x.f()
}

struct A<T> {}
struct B<T> {}
struct C<T> {}

given <T> A<T> is Base {
  fun f() {}
}

// This one is OK.
given <T> A<T> is Derived {}

// This one is missing an instance of `Base<B<T>>`.
given <T> B<T> is Derived {}

// This one is missing an instance of `Derived<C<T>>`
given <T> C<T> is FurtherDerived {}
